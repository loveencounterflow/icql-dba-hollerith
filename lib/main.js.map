{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,eAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EAhBA;;;EAqBA,GAAA,GAA4B,MAAM,CAAC;;EACnC,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B;;EAEA,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,eAAF,CAAA,GAA4B,OAAA,CAAQ,yBAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,eAAR,CAA5B,EA5BA;;;EAgCA,OAAA,GAAU,oCAhCV;;;EAmCA,KAAK,CAAC,OAAN,CAAc,qBAAd,EAAqC;IAAA,KAAA,EACnC;MAAA,eAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAhC;MACA,sBAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;QAC9B,KAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,MAAZ,CAApB;AAAA,iBAAO,MAAP;;QACA,IAAe,CAAC,CAAC,MAAF,KAAY,EAA3B;AAAA,iBAAO,KAAP;;AACA,eAAS,oBAAsB,CAAC,IAAzB,CAA8B,CAAC,CAAC,MAAhC;MAHuB,CADhC;MAKA,6BAAA,EAAgC,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAC,CAAC,GAAX,CAAF,CAAA,KAAsB;MAA/B;IALhC;EADmC,CAArC,EAnCA;;;EA4CA,KAAK,CAAC,QAAN,GACE;IAAA,mBAAA,EACE;MAAA,GAAA,EAAY,IAAZ;MACA,MAAA,EAAY;IADZ;EADF,EA7CF;;;EAkDM,IAAC,CAAA;IAAP,MAAA,IAAA,mBAAA,CAAA;;MAGE,WAAa,CAAE,GAAF,CAAA;aACX,CAAA;QACA,QAAQ,CAAC,mBAAT,CAA6B,IAAC,CAAA,GAAD,GAAO,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,mBAAjB,EAAyC,GAAA,GAAzC,CAApC,EADJ;;QAGI,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,KAAjB,EAAwB;UAAE,UAAA,EAAY,KAAd;UAAqB,KAAA,EAAO,GAAG,CAAC;QAAhC,CAAxB;QACA,OAAO,IAAC,CAAA,GAAG,CAAC;QACZ,IAAC,CAAA,GAAD,GAAO,MAAA,CAAO,IAAC,CAAA,GAAR,EALX;;QAOI,IAAC,CAAA,YAAD,CAAA;QACA,IAAC,CAAA,qBAAD,CAAA;AACA,eAAO;MAVI,CADf;;;;;;;;;;;;;MAwBE,YAAc,CAAA,CAAA;AAChB,YAAA,MAAA,EAAA;QAAI,MAAA,GAAS,IAAC,CAAA,GAAG,CAAC;QACd,GAAA,GACE;UAAA,GAAA,EAAK,GAAG,CAAA,kBAAA,CAAA,CACc,MADd,CAAA;;UAAA;QAAR;QAIF,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,KAAjB,EAAwB;UAAE,UAAA,EAAY,KAAd;UAAqB,KAAA,EAAO;QAA5B,CAAxB;AACA,eAAO;MARK,CAxBhB;;;MAmCE,qBAAuB,CAAA,CAAA;AACzB,YAAA;QAAI,MAAA,GAAU,IAAC,CAAA,GAAG,CAAC,OAAnB;;;;;;;;;;;;;;;;;AAiBI,eAAO;MAlBc;;IArCzB;;;kBA0DE,MAAA,GAAQ,eAAe,CAAC,MAAM,CAAC,IAAvB,CAA4B,eAA5B;;;;gBA1DS,KAlDnB;;;EAgHA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,IAAlC;;;EAhHA;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\nguy                       = require 'guy'\n{ HOLLERITH_CODEC, }      = require 'hollerith-codec/lib/tng'\n{ Vnr, }                  = require 'datom/lib/vnr'\n\n\n#===========================================================================================================\nname_re = /^[^-+:\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+$/u\n\n#===========================================================================================================\ntypes.declare 'vnr_constructor_cfg', tests:\n  '@isa.object x':                ( x ) -> @isa.object x\n  'x.prefix is a prefix':         ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  \"( @type_of x.dba ) is 'dba'\":  ( x ) -> ( @type_of x.dba ) is 'dba'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  vnr_constructor_cfg:\n    dba:        null\n    prefix:     'vnr_'\n\n#===========================================================================================================\nclass @Vnr extends Vnr\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    validate.vnr_constructor_cfg @cfg = { types.defaults.vnr_constructor_cfg..., cfg..., }\n    #.......................................................................................................\n    guy.props.def @, 'dba', { enumerable: false, value: cfg.dba, }\n    delete @cfg.dba\n    @cfg = freeze @cfg\n    # @_create_db_structure()\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _create_db_structure: ->\n  #   { prefix } = @cfg\n  #   @dba.execute SQL\"\"\"\n  #     create table if not exists #{prefix}variables (\n  #         key     text    not null primary key,\n  #         value   json    not null default 'null' );\n  #     \"\"\"\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    sql =\n      get: SQL\"\"\"\n        select value from #{prefix}variables\n          where key = $key\n          limit 1;\"\"\"\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    prefix  = @cfg.prefix\n    # @f      = {}\n  #   #.......................................................................................................\n  #   @dba.create_function\n  #     name:           prefix + 'get'\n  #     call:           ( key ) => @get key\n  #   #.......................................................................................................\n  #   @dba.create_table_function\n  #     name:           prefix + 'get_many'\n  #     columns:        [ 'element', ]\n  #     parameters:     [ 'key', ]\n  #     rows:           ( ( key ) -> yield from @get_many key ).bind @\n  #   #.......................................................................................................\n  #   @dba.create_function\n  #     name:           prefix + 'set'\n  #     call:           ( key ) => @set key\n  #   #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  encode: HOLLERITH_CODEC.encode.bind HOLLERITH_CODEC\n\n\n############################################################################################################\nif module is require.main then do =>\n  # debug '^2378^', require 'datom'\n\n\n\n\n\n\n\n\n"
  ]
}