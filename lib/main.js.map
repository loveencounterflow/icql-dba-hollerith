{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\nguy                       = require 'guy'\n{ Hollerith: Hollerith2, }            = require 'hollerith'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#===========================================================================================================\nname_re = /^[^-+:\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+$/u\n\n#===========================================================================================================\ntypes.declare 'dhlr_constructor_cfg', tests:\n  '@isa.object x':                ( x ) -> @isa.object x\n  'x.prefix is a prefix':         ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  \"( @type_of x.dba ) is 'dba'\":  ( x ) -> ( @type_of x.dba ) is 'dba'\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT integrate typing into class so we can uses types from `icql-dba` ###\ntypes.declare 'dhlr_alter_table_cfg', tests:\n  '@isa.object x':                ( x ) -> @isa.object x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dhlr_constructor_cfg:\n    dba:        null\n    prefix:     'hlr_'\n  dhlr_alter_table_cfg:\n    schema:               'main'\n    table_name:           null\n    json_column_name:     null\n    blob_column_name:     null\n\n#-----------------------------------------------------------------------------------------------------------\nacquire_methods = ( source, target ) ->\n  ### TAINT check for unbound methods ###\n  ### TAINT `intertype.callable()` is incomplete (? no async generator function) ###\n  for name, descriptor of Object.getOwnPropertyDescriptors source\n    { value: method, } = descriptor\n    continue unless isa.callable method\n    target[ name ] = method\n  return null\n\n\n#===========================================================================================================\nclass @Hollerith # extends Hollerith\n\n  ### TAINT make constructor work like that in Hollerith, make it a pattern ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT must pass Hollerith cfg parameters to super ###\n    # super()\n    @hlr = new Hollerith2()\n    acquire_methods @hlr, @\n    validate.dhlr_constructor_cfg @cfg = { types.defaults.dhlr_constructor_cfg..., cfg..., }\n    #.......................................................................................................\n    guy.props.def @, 'dba', { enumerable: false, value: cfg.dba, }\n    delete @cfg.dba\n    @cfg = freeze @cfg\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    # prefix = @cfg.prefix\n    # sql =\n    #   f: SQL\"\"\n    # guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    prefix  = @cfg.prefix\n    #.......................................................................................................\n    @dba.create_function name: prefix + 'advance',  call: ( vnr )   => jr @advance     jp vnr\n    @dba.create_function name: prefix + 'recede',   call: ( vnr )   => jr @recede      jp vnr\n    @dba.create_function name: prefix + 'encode',   call: ( vnr )   =>    @encode      jp vnr\n    @dba.create_function name: prefix + 'cmp',      call: ( a, b )  =>    @cmp         ( jp a ), ( jp b )\n    @dba.create_function name: prefix + 'deepen',  varargs: true, call: ( vnr, nr = 0   ) => jr @deepen ( jp vnr ), nr\n    @dba.create_function name: prefix + 'new_vnr', varargs: true, call: ( source = null ) => jr @new_vnr jp source\n    #.......................................................................................................\n    return null\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  alter_table: ( cfg ) ->\n    ### TAINT make `unique` configurable ###\n    ### TAINT make `virtual`/`stored` configurable ###\n    ### TAINT include table name in index name ###\n    validate.dhlr_alter_table_cfg cfg = { types.defaults.dhlr_alter_table_cfg..., cfg..., }\n    { schema\n      table_name\n      json_column_name\n      blob_column_name }  = cfg\n    prefix                = @cfg.prefix\n    blob_column_name     ?= json_column_name            + '_blob'\n    blob_index_name_i     = @dba.sql.I prefix + table_name + '_' + blob_column_name + '_idx' ### TAINT make configurable? ###\n    json_index_name_i     = @dba.sql.I prefix + table_name + '_' + json_column_name + '_idx' ### TAINT make configurable? ###\n    schema_i              = @dba.sql.I schema\n    table_name_i          = @dba.sql.I table_name\n    json_column_name_i    = @dba.sql.I json_column_name\n    blob_column_name_i    = @dba.sql.I blob_column_name\n    @dba.execute SQL\"\"\"\n      alter table #{schema_i}.#{table_name_i}\n        add column #{json_column_name_i} json\n        not null;\"\"\"\n    @dba.execute SQL\"\"\"\n      alter table #{schema_i}.#{table_name_i}\n        add column #{blob_column_name_i} blob\n        generated always as ( #{prefix}encode( #{json_column_name_i} ) )\n        virtual not null;\"\"\"\n    @dba.execute SQL\"\"\"\n      create unique index #{schema_i}.#{json_index_name_i}\n      on #{table_name_i} ( #{json_column_name_i} );\"\"\"\n    @dba.execute SQL\"\"\"\n      create unique index #{schema_i}.#{blob_index_name_i}\n      on #{table_name_i} ( #{prefix}encode( #{json_column_name_i} ) );\"\"\"\n    return null\n\n############################################################################################################\nif module is require.main then do =>\n  # debug '^2378^', require 'datom'\n\n\n\n\n\n\n\n\n"
  ]
}